// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// p_skater
Rcpp::List p_skater(int k, SEXP xp_w, Rcpp::List& data, int n_vars, std::string scale_method, std::string distance_method, NumericVector& bound_vals, double min_bound, int seed, int cpu_threads, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_skater(SEXP kSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP seedSEXP, SEXP cpu_threadsSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_skater(k, xp_w, data, n_vars, scale_method, distance_method, bound_vals, min_bound, seed, cpu_threads, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_redcap
Rcpp::List p_redcap(int k, SEXP xp_w, Rcpp::List& data, int n_vars, std::string redcap_method, std::string scale_method, std::string distance_method, NumericVector& bound_vals, double min_bound, int seed, int cpu_threads, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_redcap(SEXP kSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP redcap_methodSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP seedSEXP, SEXP cpu_threadsSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< std::string >::type redcap_method(redcap_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_redcap(k, xp_w, data, n_vars, redcap_method, scale_method, distance_method, bound_vals, min_bound, seed, cpu_threads, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_schc
Rcpp::List p_schc(int k, SEXP xp_w, Rcpp::List& data, int n_vars, std::string linkage_method, std::string scale_method, std::string distance_method, NumericVector& bound_vals, double min_bound, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_schc(SEXP kSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP linkage_methodSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< std::string >::type linkage_method(linkage_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_schc(k, xp_w, data, n_vars, linkage_method, scale_method, distance_method, bound_vals, min_bound, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_maxp_greedy
Rcpp::List p_maxp_greedy(SEXP xp_w, Rcpp::List& data, int n_vars, NumericVector& bound_vals, double min_bound, int iterations, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, int cpu_threads, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_maxp_greedy(SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP iterationsSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP cpu_threadsSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_maxp_greedy(xp_w, data, n_vars, bound_vals, min_bound, iterations, init_regions, scale_method, distance_method, seed, cpu_threads, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_maxp_sa
Rcpp::List p_maxp_sa(SEXP xp_w, Rcpp::List& data, int n_vars, NumericVector& bound_vals, double min_bound, int iterations, double cooling_rate, int sa_maxit, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, int cpu_threads, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_maxp_sa(SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP iterationsSEXP, SEXP cooling_rateSEXP, SEXP sa_maxitSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP cpu_threadsSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type cooling_rate(cooling_rateSEXP);
    Rcpp::traits::input_parameter< int >::type sa_maxit(sa_maxitSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_maxp_sa(xp_w, data, n_vars, bound_vals, min_bound, iterations, cooling_rate, sa_maxit, init_regions, scale_method, distance_method, seed, cpu_threads, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_maxp_tabu
Rcpp::List p_maxp_tabu(SEXP xp_w, Rcpp::List& data, int n_vars, NumericVector& bound_vals, double min_bound, int iterations, int tabu_length, int conv_tabu, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, int cpu_threads, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_maxp_tabu(SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP iterationsSEXP, SEXP tabu_lengthSEXP, SEXP conv_tabuSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP cpu_threadsSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type tabu_length(tabu_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type conv_tabu(conv_tabuSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_maxp_tabu(xp_w, data, n_vars, bound_vals, min_bound, iterations, tabu_length, conv_tabu, init_regions, scale_method, distance_method, seed, cpu_threads, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_azp_greedy
Rcpp::List p_azp_greedy(int p, SEXP xp_w, Rcpp::List& data, int n_vars, NumericVector& bound_vals, double min_bound, int inits, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_azp_greedy(SEXP pSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP initsSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_azp_greedy(p, xp_w, data, n_vars, bound_vals, min_bound, inits, init_regions, scale_method, distance_method, seed, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_azp_sa
Rcpp::List p_azp_sa(int p, SEXP xp_w, Rcpp::List& data, int n_vars, double cooling_rate, int sa_maxit, NumericVector& bound_vals, double min_bound, int inits, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_azp_sa(SEXP pSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP cooling_rateSEXP, SEXP sa_maxitSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP initsSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< double >::type cooling_rate(cooling_rateSEXP);
    Rcpp::traits::input_parameter< int >::type sa_maxit(sa_maxitSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_azp_sa(p, xp_w, data, n_vars, cooling_rate, sa_maxit, bound_vals, min_bound, inits, init_regions, scale_method, distance_method, seed, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_azp_tabu
Rcpp::List p_azp_tabu(int p, SEXP xp_w, Rcpp::List& data, int n_vars, int tabu_length, int conv_tabu, NumericVector& bound_vals, double min_bound, int inits, NumericVector& init_regions, std::string scale_method, std::string distance_method, int seed, NumericVector& rdist);
RcppExport SEXP _rgeoda_p_azp_tabu(SEXP pSEXP, SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP tabu_lengthSEXP, SEXP conv_tabuSEXP, SEXP bound_valsSEXP, SEXP min_boundSEXP, SEXP initsSEXP, SEXP init_regionsSEXP, SEXP scale_methodSEXP, SEXP distance_methodSEXP, SEXP seedSEXP, SEXP rdistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< int >::type tabu_length(tabu_lengthSEXP);
    Rcpp::traits::input_parameter< int >::type conv_tabu(conv_tabuSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type bound_vals(bound_valsSEXP);
    Rcpp::traits::input_parameter< double >::type min_bound(min_boundSEXP);
    Rcpp::traits::input_parameter< int >::type inits(initsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type init_regions(init_regionsSEXP);
    Rcpp::traits::input_parameter< std::string >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< std::string >::type distance_method(distance_methodSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type rdist(rdistSEXP);
    rcpp_result_gen = Rcpp::wrap(p_azp_tabu(p, xp_w, data, n_vars, tabu_length, conv_tabu, bound_vals, min_bound, inits, init_regions, scale_method, distance_method, seed, rdist));
    return rcpp_result_gen;
END_RCPP
}
// p_spatialvalidation
Rcpp::List p_spatialvalidation(SEXP xp_geoda, NumericVector& clusters, SEXP xp_w);
RcppExport SEXP _rgeoda_p_spatialvalidation(SEXP xp_geodaSEXP, SEXP clustersSEXP, SEXP xp_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    rcpp_result_gen = Rcpp::wrap(p_spatialvalidation(xp_geoda, clusters, xp_w));
    return rcpp_result_gen;
END_RCPP
}
// p_joincount_ratio
Rcpp::List p_joincount_ratio(NumericVector& clusters, SEXP xp_w);
RcppExport SEXP _rgeoda_p_joincount_ratio(SEXP clustersSEXP, SEXP xp_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    rcpp_result_gen = Rcpp::wrap(p_joincount_ratio(clusters, xp_w));
    return rcpp_result_gen;
END_RCPP
}
// p_make_spatial
Rcpp::NumericVector p_make_spatial(NumericVector& clusters, SEXP xp_w);
RcppExport SEXP _rgeoda_p_make_spatial(SEXP clustersSEXP, SEXP xp_wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    rcpp_result_gen = Rcpp::wrap(p_make_spatial(clusters, xp_w));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__Run
void p_LISA__Run(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__Run(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    p_LISA__Run(xp);
    return R_NilValue;
END_RCPP
}
// p_LISA__SetNumPermutations
void p_LISA__SetNumPermutations(SEXP xp, int num_perm);
RcppExport SEXP _rgeoda_p_LISA__SetNumPermutations(SEXP xpSEXP, SEXP num_permSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type num_perm(num_permSEXP);
    p_LISA__SetNumPermutations(xp, num_perm);
    return R_NilValue;
END_RCPP
}
// p_LISA__SetNumThreads
void p_LISA__SetNumThreads(SEXP xp, int num_threads);
RcppExport SEXP _rgeoda_p_LISA__SetNumThreads(SEXP xpSEXP, SEXP num_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    p_LISA__SetNumThreads(xp, num_threads);
    return R_NilValue;
END_RCPP
}
// p_LISA__GetLISAValues
std::vector<double> p_LISA__GetLISAValues(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetLISAValues(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetLISAValues(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetLocalSignificanceValues
std::vector<double> p_LISA__GetLocalSignificanceValues(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetLocalSignificanceValues(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetLocalSignificanceValues(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetClusterIndicators
std::vector<int> p_LISA__GetClusterIndicators(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetClusterIndicators(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetClusterIndicators(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetNumNeighbors
std::vector<int> p_LISA__GetNumNeighbors(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetNumNeighbors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetNumNeighbors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__SetSignificanceCutoff
void p_LISA__SetSignificanceCutoff(SEXP xp, double cutoff);
RcppExport SEXP _rgeoda_p_LISA__SetSignificanceCutoff(SEXP xpSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    p_LISA__SetSignificanceCutoff(xp, cutoff);
    return R_NilValue;
END_RCPP
}
// p_LISA__GetLabels
std::vector<std::string> p_LISA__GetLabels(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetLabels(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetLabels(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetColors
std::vector<std::string> p_LISA__GetColors(SEXP xp);
RcppExport SEXP _rgeoda_p_LISA__GetColors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetColors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetBO
double p_LISA__GetBO(SEXP xp, double pval);
RcppExport SEXP _rgeoda_p_LISA__GetBO(SEXP xpSEXP, SEXP pvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< double >::type pval(pvalSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetBO(xp, pval));
    return rcpp_result_gen;
END_RCPP
}
// p_LISA__GetFDR
double p_LISA__GetFDR(SEXP xp, double pval);
RcppExport SEXP _rgeoda_p_LISA__GetFDR(SEXP xpSEXP, SEXP pvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< double >::type pval(pvalSEXP);
    rcpp_result_gen = Rcpp::wrap(p_LISA__GetFDR(xp, pval));
    return rcpp_result_gen;
END_RCPP
}
// p_localmoran
SEXP p_localmoran(SEXP xp_w, NumericVector data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localmoran(SEXP xp_wSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localmoran(xp_w, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_bi_localmoran
SEXP p_bi_localmoran(SEXP xp_w, NumericVector& data1, NumericVector& data2, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_bi_localmoran(SEXP xp_wSEXP, SEXP data1SEXP, SEXP data2SEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data1(data1SEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data2(data2SEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_bi_localmoran(xp_w, data1, data2, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_eb_rate
DataFrame p_eb_rate(NumericVector& event_data, NumericVector& base_data);
RcppExport SEXP _rgeoda_p_eb_rate(SEXP event_dataSEXP, SEXP base_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type event_data(event_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type base_data(base_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_eb_rate(event_data, base_data));
    return rcpp_result_gen;
END_RCPP
}
// p_localmoran_eb
SEXP p_localmoran_eb(SEXP xp_w, NumericVector& event_data, NumericVector& base_data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localmoran_eb(SEXP xp_wSEXP, SEXP event_dataSEXP, SEXP base_dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type event_data(event_dataSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type base_data(base_dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localmoran_eb(xp_w, event_data, base_data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localgeary
SEXP p_localgeary(SEXP xp_w, NumericVector& data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localgeary(SEXP xp_wSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localgeary(xp_w, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localmultigeary
SEXP p_localmultigeary(SEXP xp_w, Rcpp::List& data, int n_vars, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localmultigeary(SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localmultigeary(xp_w, data, n_vars, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localg
SEXP p_localg(SEXP xp_w, NumericVector& data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localg(SEXP xp_wSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localg(xp_w, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localgstar
SEXP p_localgstar(SEXP xp_w, NumericVector& data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localgstar(SEXP xp_wSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localgstar(xp_w, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localjoincount
SEXP p_localjoincount(SEXP xp_w, NumericVector& data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localjoincount(SEXP xp_wSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localjoincount(xp_w, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_localmultijoincount
SEXP p_localmultijoincount(SEXP xp_w, Rcpp::List& data, int n_vars, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_localmultijoincount(SEXP xp_wSEXP, SEXP dataSEXP, SEXP n_varsSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_localmultijoincount(xp_w, data, n_vars, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_quantilelisa
SEXP p_quantilelisa(SEXP xp_w, int k, int quantile, NumericVector& data, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_quantilelisa(SEXP xp_wSEXP, SEXP kSEXP, SEXP quantileSEXP, SEXP dataSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type quantile(quantileSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_quantilelisa(xp_w, k, quantile, data, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_multiquantilelisa
SEXP p_multiquantilelisa(SEXP xp_w, NumericVector& k_s, NumericVector& q_s, Rcpp::List& data_s, int permutations, std::string permutation_method, double significance_cutoff, int cpu_threads, int seed);
RcppExport SEXP _rgeoda_p_multiquantilelisa(SEXP xp_wSEXP, SEXP k_sSEXP, SEXP q_sSEXP, SEXP data_sSEXP, SEXP permutationsSEXP, SEXP permutation_methodSEXP, SEXP significance_cutoffSEXP, SEXP cpu_threadsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_w(xp_wSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type k_s(k_sSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type q_s(q_sSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data_s(data_sSEXP);
    Rcpp::traits::input_parameter< int >::type permutations(permutationsSEXP);
    Rcpp::traits::input_parameter< std::string >::type permutation_method(permutation_methodSEXP);
    Rcpp::traits::input_parameter< double >::type significance_cutoff(significance_cutoffSEXP);
    Rcpp::traits::input_parameter< int >::type cpu_threads(cpu_threadsSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(p_multiquantilelisa(xp_w, k_s, q_s, data_s, permutations, permutation_method, significance_cutoff, cpu_threads, seed));
    return rcpp_result_gen;
END_RCPP
}
// p_neighbor_match_test
DataFrame p_neighbor_match_test(SEXP xp_geoda, int k, double power, bool is_inverse, bool is_arc, bool is_mile, Rcpp::List& data_s, int n_vars, const std::string& scale_method, const std::string& dist_type);
RcppExport SEXP _rgeoda_p_neighbor_match_test(SEXP xp_geodaSEXP, SEXP kSEXP, SEXP powerSEXP, SEXP is_inverseSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP, SEXP data_sSEXP, SEXP n_varsSEXP, SEXP scale_methodSEXP, SEXP dist_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_inverse(is_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data_s(data_sSEXP);
    Rcpp::traits::input_parameter< int >::type n_vars(n_varsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type scale_method(scale_methodSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dist_type(dist_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(p_neighbor_match_test(xp_geoda, k, power, is_inverse, is_arc, is_mile, data_s, n_vars, scale_method, dist_type));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__new
SEXP p_GeoDa__new(std::string file_path);
RcppExport SEXP _rgeoda_p_GeoDa__new(SEXP file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file_path(file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__new(file_path));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__new1
SEXP p_GeoDa__new1(SEXP xp, std::string layer_name, std::string map_type, int num_features, RawVector& wkbs, NumericVector& wkb_bytes_len);
RcppExport SEXP _rgeoda_p_GeoDa__new1(SEXP xpSEXP, SEXP layer_nameSEXP, SEXP map_typeSEXP, SEXP num_featuresSEXP, SEXP wkbsSEXP, SEXP wkb_bytes_lenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer_name(layer_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type map_type(map_typeSEXP);
    Rcpp::traits::input_parameter< int >::type num_features(num_featuresSEXP);
    Rcpp::traits::input_parameter< RawVector& >::type wkbs(wkbsSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type wkb_bytes_len(wkb_bytes_lenSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__new1(xp, layer_name, map_type, num_features, wkbs, wkb_bytes_len));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetNumObs
int p_GeoDa__GetNumObs(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetNumObs(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetNumObs(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetNumCols
int p_GeoDa__GetNumCols(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetNumCols(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetNumCols(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetMapType
int p_GeoDa__GetMapType(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetMapType(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetMapType(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetFieldNames
StringVector p_GeoDa__GetFieldNames(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetFieldNames(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetFieldNames(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetFieldTypes
StringVector p_GeoDa__GetFieldTypes(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetFieldTypes(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetFieldTypes(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetNumericCol
NumericVector p_GeoDa__GetNumericCol(SEXP xp, std::string col_name);
RcppExport SEXP _rgeoda_p_GeoDa__GetNumericCol(SEXP xpSEXP, SEXP col_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetNumericCol(xp, col_name));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetIntegerCol
NumericVector p_GeoDa__GetIntegerCol(SEXP xp, std::string col_name);
RcppExport SEXP _rgeoda_p_GeoDa__GetIntegerCol(SEXP xpSEXP, SEXP col_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetIntegerCol(xp, col_name));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetStringCol
StringVector p_GeoDa__GetStringCol(SEXP xp, std::string col_name);
RcppExport SEXP _rgeoda_p_GeoDa__GetStringCol(SEXP xpSEXP, SEXP col_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetStringCol(xp, col_name));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetNullValues
LogicalVector p_GeoDa__GetNullValues(SEXP xp, std::string col_name);
RcppExport SEXP _rgeoda_p_GeoDa__GetNullValues(SEXP xpSEXP, SEXP col_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetNullValues(xp, col_name));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDa__GetPointer
SEXP p_GeoDa__GetPointer(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDa__GetPointer(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDa__GetPointer(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaTable__new
SEXP p_GeoDaTable__new();
RcppExport SEXP _rgeoda_p_GeoDaTable__new() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(p_GeoDaTable__new());
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaTable__AddIntColumn
void p_GeoDaTable__AddIntColumn(SEXP xp, std::string col_name, NumericVector& vals);
RcppExport SEXP _rgeoda_p_GeoDaTable__AddIntColumn(SEXP xpSEXP, SEXP col_nameSEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type vals(valsSEXP);
    p_GeoDaTable__AddIntColumn(xp, col_name, vals);
    return R_NilValue;
END_RCPP
}
// p_GeoDaTable__AddStringColumn
void p_GeoDaTable__AddStringColumn(SEXP xp, std::string col_name, StringVector& vals);
RcppExport SEXP _rgeoda_p_GeoDaTable__AddStringColumn(SEXP xpSEXP, SEXP col_nameSEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    Rcpp::traits::input_parameter< StringVector& >::type vals(valsSEXP);
    p_GeoDaTable__AddStringColumn(xp, col_name, vals);
    return R_NilValue;
END_RCPP
}
// p_GeoDaTable__AddRealColumn
void p_GeoDaTable__AddRealColumn(SEXP xp, std::string col_name, NumericVector& vals);
RcppExport SEXP _rgeoda_p_GeoDaTable__AddRealColumn(SEXP xpSEXP, SEXP col_nameSEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type col_name(col_nameSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type vals(valsSEXP);
    p_GeoDaTable__AddRealColumn(xp, col_name, vals);
    return R_NilValue;
END_RCPP
}
// p_GeoDaTable__GetPointer
SEXP p_GeoDaTable__GetPointer(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaTable__GetPointer(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaTable__GetPointer(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_isbinary
bool p_gda_isbinary(Rcpp::NumericVector& values);
RcppExport SEXP _rgeoda_p_gda_isbinary(SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_isbinary(values));
    return rcpp_result_gen;
END_RCPP
}
// p_naturalbreaks
Rcpp::NumericVector p_naturalbreaks(int k, Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_naturalbreaks(SEXP kSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_naturalbreaks(k, data));
    return rcpp_result_gen;
END_RCPP
}
// p_quantilebreaks
Rcpp::NumericVector p_quantilebreaks(int k, Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_quantilebreaks(SEXP kSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_quantilebreaks(k, data));
    return rcpp_result_gen;
END_RCPP
}
// p_hinge15breaks
Rcpp::NumericVector p_hinge15breaks(Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_hinge15breaks(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_hinge15breaks(data));
    return rcpp_result_gen;
END_RCPP
}
// p_hinge30breaks
Rcpp::NumericVector p_hinge30breaks(Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_hinge30breaks(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_hinge30breaks(data));
    return rcpp_result_gen;
END_RCPP
}
// p_percentilebreaks
Rcpp::NumericVector p_percentilebreaks(Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_percentilebreaks(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_percentilebreaks(data));
    return rcpp_result_gen;
END_RCPP
}
// p_stddevbreaks
Rcpp::NumericVector p_stddevbreaks(Rcpp::NumericVector data);
RcppExport SEXP _rgeoda_p_stddevbreaks(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(p_stddevbreaks(data));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__new
SEXP p_GeoDaWeight__new(int num_obs);
RcppExport SEXP _rgeoda_p_GeoDaWeight__new(SEXP num_obsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_obs(num_obsSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__new(num_obs));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetPointer
SEXP p_GeoDaWeight__GetPointer(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetPointer(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetPointer(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__SetNeighbors
void p_GeoDaWeight__SetNeighbors(SEXP xp, int idx, SEXP v_nbr_ids);
RcppExport SEXP _rgeoda_p_GeoDaWeight__SetNeighbors(SEXP xpSEXP, SEXP idxSEXP, SEXP v_nbr_idsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_nbr_ids(v_nbr_idsSEXP);
    p_GeoDaWeight__SetNeighbors(xp, idx, v_nbr_ids);
    return R_NilValue;
END_RCPP
}
// p_GeoDaWeight__SetNeighborsAndWeights
void p_GeoDaWeight__SetNeighborsAndWeights(SEXP xp, int idx, SEXP v_nbr_ids, SEXP v_nbr_w);
RcppExport SEXP _rgeoda_p_GeoDaWeight__SetNeighborsAndWeights(SEXP xpSEXP, SEXP idxSEXP, SEXP v_nbr_idsSEXP, SEXP v_nbr_wSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_nbr_ids(v_nbr_idsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_nbr_w(v_nbr_wSEXP);
    p_GeoDaWeight__SetNeighborsAndWeights(xp, idx, v_nbr_ids, v_nbr_w);
    return R_NilValue;
END_RCPP
}
// p_GeoDaWeight__GetNbrStats
void p_GeoDaWeight__GetNbrStats(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetNbrStats(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    p_GeoDaWeight__GetNbrStats(xp);
    return R_NilValue;
END_RCPP
}
// p_GeoDaWeight__GetNumObs
int p_GeoDaWeight__GetNumObs(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetNumObs(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetNumObs(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__IsSymmetric
bool p_GeoDaWeight__IsSymmetric(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__IsSymmetric(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__IsSymmetric(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__HasIsolates
bool p_GeoDaWeight__HasIsolates(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__HasIsolates(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__HasIsolates(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetSparsity
double p_GeoDaWeight__GetSparsity(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetSparsity(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetSparsity(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetMinNeighbors
int p_GeoDaWeight__GetMinNeighbors(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetMinNeighbors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetMinNeighbors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetMaxNeighbors
int p_GeoDaWeight__GetMaxNeighbors(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetMaxNeighbors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetMaxNeighbors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetMeanNeighbors
double p_GeoDaWeight__GetMeanNeighbors(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetMeanNeighbors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetMeanNeighbors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetMedianNeighbors
double p_GeoDaWeight__GetMedianNeighbors(SEXP xp);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetMedianNeighbors(SEXP xpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetMedianNeighbors(xp));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__SpatialLag
Rcpp::DataFrame p_GeoDaWeight__SpatialLag(SEXP xp, SEXP vals);
RcppExport SEXP _rgeoda_p_GeoDaWeight__SpatialLag(SEXP xpSEXP, SEXP valsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< SEXP >::type vals(valsSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__SpatialLag(xp, vals));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetNeighborSize
int p_GeoDaWeight__GetNeighborSize(SEXP xp, int obs_idx);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetNeighborSize(SEXP xpSEXP, SEXP obs_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type obs_idx(obs_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetNeighborSize(xp, obs_idx));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__SaveToFile
bool p_GeoDaWeight__SaveToFile(SEXP xp, std::string out_path, std::string layer_name, std::string id_name, SEXP id_vec);
RcppExport SEXP _rgeoda_p_GeoDaWeight__SaveToFile(SEXP xpSEXP, SEXP out_pathSEXP, SEXP layer_nameSEXP, SEXP id_nameSEXP, SEXP id_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< std::string >::type out_path(out_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type layer_name(layer_nameSEXP);
    Rcpp::traits::input_parameter< std::string >::type id_name(id_nameSEXP);
    Rcpp::traits::input_parameter< SEXP >::type id_vec(id_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__SaveToFile(xp, out_path, layer_name, id_name, id_vec));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetNeighbors
NumericVector p_GeoDaWeight__GetNeighbors(SEXP xp, int obs_idx);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetNeighbors(SEXP xpSEXP, SEXP obs_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type obs_idx(obs_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetNeighbors(xp, obs_idx));
    return rcpp_result_gen;
END_RCPP
}
// p_GeoDaWeight__GetNeighborWeights
DoubleVector p_GeoDaWeight__GetNeighborWeights(SEXP xp, int obs_idx);
RcppExport SEXP _rgeoda_p_GeoDaWeight__GetNeighborWeights(SEXP xpSEXP, SEXP obs_idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< int >::type obs_idx(obs_idxSEXP);
    rcpp_result_gen = Rcpp::wrap(p_GeoDaWeight__GetNeighborWeights(xp, obs_idx));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_min_distthreshold
double p_gda_min_distthreshold(SEXP xp_geoda, bool is_arc, bool is_mile);
RcppExport SEXP _rgeoda_p_gda_min_distthreshold(SEXP xp_geodaSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_min_distthreshold(xp_geoda, is_arc, is_mile));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_queen_weights
SEXP p_gda_queen_weights(SEXP xp_geoda, int order, bool include_lower_order, double precision_threshold);
RcppExport SEXP _rgeoda_p_gda_queen_weights(SEXP xp_geodaSEXP, SEXP orderSEXP, SEXP include_lower_orderSEXP, SEXP precision_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type include_lower_order(include_lower_orderSEXP);
    Rcpp::traits::input_parameter< double >::type precision_threshold(precision_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_queen_weights(xp_geoda, order, include_lower_order, precision_threshold));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_rook_weights
SEXP p_gda_rook_weights(SEXP xp_geoda, int order, bool include_lower_order, double precision_threshold);
RcppExport SEXP _rgeoda_p_gda_rook_weights(SEXP xp_geodaSEXP, SEXP orderSEXP, SEXP include_lower_orderSEXP, SEXP precision_thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type include_lower_order(include_lower_orderSEXP);
    Rcpp::traits::input_parameter< double >::type precision_threshold(precision_thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_rook_weights(xp_geoda, order, include_lower_order, precision_threshold));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_distance_weights
SEXP p_gda_distance_weights(SEXP xp_geoda, double dist_thres, double power, bool is_inverse, bool is_arc, bool is_mile);
RcppExport SEXP _rgeoda_p_gda_distance_weights(SEXP xp_geodaSEXP, SEXP dist_thresSEXP, SEXP powerSEXP, SEXP is_inverseSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< double >::type dist_thres(dist_thresSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_inverse(is_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_distance_weights(xp_geoda, dist_thres, power, is_inverse, is_arc, is_mile));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_kernel_weights
SEXP p_gda_kernel_weights(SEXP xp_geoda, double bandwidth, std::string kernel_method, bool use_kernel_diagonals, double power, bool is_inverse, bool is_arc, bool is_mile);
RcppExport SEXP _rgeoda_p_gda_kernel_weights(SEXP xp_geodaSEXP, SEXP bandwidthSEXP, SEXP kernel_methodSEXP, SEXP use_kernel_diagonalsSEXP, SEXP powerSEXP, SEXP is_inverseSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_method(kernel_methodSEXP);
    Rcpp::traits::input_parameter< bool >::type use_kernel_diagonals(use_kernel_diagonalsSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_inverse(is_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_kernel_weights(xp_geoda, bandwidth, kernel_method, use_kernel_diagonals, power, is_inverse, is_arc, is_mile));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_knn_weights
SEXP p_gda_knn_weights(SEXP xp_geoda, int k, double power, bool is_inverse, bool is_arc, bool is_mile);
RcppExport SEXP _rgeoda_p_gda_knn_weights(SEXP xp_geodaSEXP, SEXP kSEXP, SEXP powerSEXP, SEXP is_inverseSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_inverse(is_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_knn_weights(xp_geoda, k, power, is_inverse, is_arc, is_mile));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_kernel_knn_weights
SEXP p_gda_kernel_knn_weights(SEXP xp_geoda, int k, double power, bool is_inverse, bool is_arc, bool is_mile, std::string kernel_method, double bandwidth, bool adaptive_bandwidth, bool use_kernel_diagonals);
RcppExport SEXP _rgeoda_p_gda_kernel_knn_weights(SEXP xp_geodaSEXP, SEXP kSEXP, SEXP powerSEXP, SEXP is_inverseSEXP, SEXP is_arcSEXP, SEXP is_mileSEXP, SEXP kernel_methodSEXP, SEXP bandwidthSEXP, SEXP adaptive_bandwidthSEXP, SEXP use_kernel_diagonalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type xp_geoda(xp_geodaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< bool >::type is_inverse(is_inverseSEXP);
    Rcpp::traits::input_parameter< bool >::type is_arc(is_arcSEXP);
    Rcpp::traits::input_parameter< bool >::type is_mile(is_mileSEXP);
    Rcpp::traits::input_parameter< std::string >::type kernel_method(kernel_methodSEXP);
    Rcpp::traits::input_parameter< double >::type bandwidth(bandwidthSEXP);
    Rcpp::traits::input_parameter< bool >::type adaptive_bandwidth(adaptive_bandwidthSEXP);
    Rcpp::traits::input_parameter< bool >::type use_kernel_diagonals(use_kernel_diagonalsSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_kernel_knn_weights(xp_geoda, k, power, is_inverse, is_arc, is_mile, kernel_method, bandwidth, adaptive_bandwidth, use_kernel_diagonals));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_load_gal
SEXP p_gda_load_gal(const char* weights_path, SEXP v_id_vec);
RcppExport SEXP _rgeoda_p_gda_load_gal(SEXP weights_pathSEXP, SEXP v_id_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type weights_path(weights_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_id_vec(v_id_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_load_gal(weights_path, v_id_vec));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_load_gwt
SEXP p_gda_load_gwt(const char* weights_path, SEXP v_id_vec);
RcppExport SEXP _rgeoda_p_gda_load_gwt(SEXP weights_pathSEXP, SEXP v_id_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type weights_path(weights_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_id_vec(v_id_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_load_gwt(weights_path, v_id_vec));
    return rcpp_result_gen;
END_RCPP
}
// p_gda_load_swm
SEXP p_gda_load_swm(const char* weights_path, SEXP v_id_vec);
RcppExport SEXP _rgeoda_p_gda_load_swm(SEXP weights_pathSEXP, SEXP v_id_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type weights_path(weights_pathSEXP);
    Rcpp::traits::input_parameter< SEXP >::type v_id_vec(v_id_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(p_gda_load_swm(weights_path, v_id_vec));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rgeoda_p_skater", (DL_FUNC) &_rgeoda_p_skater, 11},
    {"_rgeoda_p_redcap", (DL_FUNC) &_rgeoda_p_redcap, 12},
    {"_rgeoda_p_schc", (DL_FUNC) &_rgeoda_p_schc, 10},
    {"_rgeoda_p_maxp_greedy", (DL_FUNC) &_rgeoda_p_maxp_greedy, 12},
    {"_rgeoda_p_maxp_sa", (DL_FUNC) &_rgeoda_p_maxp_sa, 14},
    {"_rgeoda_p_maxp_tabu", (DL_FUNC) &_rgeoda_p_maxp_tabu, 14},
    {"_rgeoda_p_azp_greedy", (DL_FUNC) &_rgeoda_p_azp_greedy, 12},
    {"_rgeoda_p_azp_sa", (DL_FUNC) &_rgeoda_p_azp_sa, 14},
    {"_rgeoda_p_azp_tabu", (DL_FUNC) &_rgeoda_p_azp_tabu, 14},
    {"_rgeoda_p_spatialvalidation", (DL_FUNC) &_rgeoda_p_spatialvalidation, 3},
    {"_rgeoda_p_joincount_ratio", (DL_FUNC) &_rgeoda_p_joincount_ratio, 2},
    {"_rgeoda_p_make_spatial", (DL_FUNC) &_rgeoda_p_make_spatial, 2},
    {"_rgeoda_p_LISA__Run", (DL_FUNC) &_rgeoda_p_LISA__Run, 1},
    {"_rgeoda_p_LISA__SetNumPermutations", (DL_FUNC) &_rgeoda_p_LISA__SetNumPermutations, 2},
    {"_rgeoda_p_LISA__SetNumThreads", (DL_FUNC) &_rgeoda_p_LISA__SetNumThreads, 2},
    {"_rgeoda_p_LISA__GetLISAValues", (DL_FUNC) &_rgeoda_p_LISA__GetLISAValues, 1},
    {"_rgeoda_p_LISA__GetLocalSignificanceValues", (DL_FUNC) &_rgeoda_p_LISA__GetLocalSignificanceValues, 1},
    {"_rgeoda_p_LISA__GetClusterIndicators", (DL_FUNC) &_rgeoda_p_LISA__GetClusterIndicators, 1},
    {"_rgeoda_p_LISA__GetNumNeighbors", (DL_FUNC) &_rgeoda_p_LISA__GetNumNeighbors, 1},
    {"_rgeoda_p_LISA__SetSignificanceCutoff", (DL_FUNC) &_rgeoda_p_LISA__SetSignificanceCutoff, 2},
    {"_rgeoda_p_LISA__GetLabels", (DL_FUNC) &_rgeoda_p_LISA__GetLabels, 1},
    {"_rgeoda_p_LISA__GetColors", (DL_FUNC) &_rgeoda_p_LISA__GetColors, 1},
    {"_rgeoda_p_LISA__GetBO", (DL_FUNC) &_rgeoda_p_LISA__GetBO, 2},
    {"_rgeoda_p_LISA__GetFDR", (DL_FUNC) &_rgeoda_p_LISA__GetFDR, 2},
    {"_rgeoda_p_localmoran", (DL_FUNC) &_rgeoda_p_localmoran, 7},
    {"_rgeoda_p_bi_localmoran", (DL_FUNC) &_rgeoda_p_bi_localmoran, 8},
    {"_rgeoda_p_eb_rate", (DL_FUNC) &_rgeoda_p_eb_rate, 2},
    {"_rgeoda_p_localmoran_eb", (DL_FUNC) &_rgeoda_p_localmoran_eb, 8},
    {"_rgeoda_p_localgeary", (DL_FUNC) &_rgeoda_p_localgeary, 7},
    {"_rgeoda_p_localmultigeary", (DL_FUNC) &_rgeoda_p_localmultigeary, 8},
    {"_rgeoda_p_localg", (DL_FUNC) &_rgeoda_p_localg, 7},
    {"_rgeoda_p_localgstar", (DL_FUNC) &_rgeoda_p_localgstar, 7},
    {"_rgeoda_p_localjoincount", (DL_FUNC) &_rgeoda_p_localjoincount, 7},
    {"_rgeoda_p_localmultijoincount", (DL_FUNC) &_rgeoda_p_localmultijoincount, 8},
    {"_rgeoda_p_quantilelisa", (DL_FUNC) &_rgeoda_p_quantilelisa, 9},
    {"_rgeoda_p_multiquantilelisa", (DL_FUNC) &_rgeoda_p_multiquantilelisa, 9},
    {"_rgeoda_p_neighbor_match_test", (DL_FUNC) &_rgeoda_p_neighbor_match_test, 10},
    {"_rgeoda_p_GeoDa__new", (DL_FUNC) &_rgeoda_p_GeoDa__new, 1},
    {"_rgeoda_p_GeoDa__new1", (DL_FUNC) &_rgeoda_p_GeoDa__new1, 6},
    {"_rgeoda_p_GeoDa__GetNumObs", (DL_FUNC) &_rgeoda_p_GeoDa__GetNumObs, 1},
    {"_rgeoda_p_GeoDa__GetNumCols", (DL_FUNC) &_rgeoda_p_GeoDa__GetNumCols, 1},
    {"_rgeoda_p_GeoDa__GetMapType", (DL_FUNC) &_rgeoda_p_GeoDa__GetMapType, 1},
    {"_rgeoda_p_GeoDa__GetFieldNames", (DL_FUNC) &_rgeoda_p_GeoDa__GetFieldNames, 1},
    {"_rgeoda_p_GeoDa__GetFieldTypes", (DL_FUNC) &_rgeoda_p_GeoDa__GetFieldTypes, 1},
    {"_rgeoda_p_GeoDa__GetNumericCol", (DL_FUNC) &_rgeoda_p_GeoDa__GetNumericCol, 2},
    {"_rgeoda_p_GeoDa__GetIntegerCol", (DL_FUNC) &_rgeoda_p_GeoDa__GetIntegerCol, 2},
    {"_rgeoda_p_GeoDa__GetStringCol", (DL_FUNC) &_rgeoda_p_GeoDa__GetStringCol, 2},
    {"_rgeoda_p_GeoDa__GetNullValues", (DL_FUNC) &_rgeoda_p_GeoDa__GetNullValues, 2},
    {"_rgeoda_p_GeoDa__GetPointer", (DL_FUNC) &_rgeoda_p_GeoDa__GetPointer, 1},
    {"_rgeoda_p_GeoDaTable__new", (DL_FUNC) &_rgeoda_p_GeoDaTable__new, 0},
    {"_rgeoda_p_GeoDaTable__AddIntColumn", (DL_FUNC) &_rgeoda_p_GeoDaTable__AddIntColumn, 3},
    {"_rgeoda_p_GeoDaTable__AddStringColumn", (DL_FUNC) &_rgeoda_p_GeoDaTable__AddStringColumn, 3},
    {"_rgeoda_p_GeoDaTable__AddRealColumn", (DL_FUNC) &_rgeoda_p_GeoDaTable__AddRealColumn, 3},
    {"_rgeoda_p_GeoDaTable__GetPointer", (DL_FUNC) &_rgeoda_p_GeoDaTable__GetPointer, 1},
    {"_rgeoda_p_gda_isbinary", (DL_FUNC) &_rgeoda_p_gda_isbinary, 1},
    {"_rgeoda_p_naturalbreaks", (DL_FUNC) &_rgeoda_p_naturalbreaks, 2},
    {"_rgeoda_p_quantilebreaks", (DL_FUNC) &_rgeoda_p_quantilebreaks, 2},
    {"_rgeoda_p_hinge15breaks", (DL_FUNC) &_rgeoda_p_hinge15breaks, 1},
    {"_rgeoda_p_hinge30breaks", (DL_FUNC) &_rgeoda_p_hinge30breaks, 1},
    {"_rgeoda_p_percentilebreaks", (DL_FUNC) &_rgeoda_p_percentilebreaks, 1},
    {"_rgeoda_p_stddevbreaks", (DL_FUNC) &_rgeoda_p_stddevbreaks, 1},
    {"_rgeoda_p_GeoDaWeight__new", (DL_FUNC) &_rgeoda_p_GeoDaWeight__new, 1},
    {"_rgeoda_p_GeoDaWeight__GetPointer", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetPointer, 1},
    {"_rgeoda_p_GeoDaWeight__SetNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__SetNeighbors, 3},
    {"_rgeoda_p_GeoDaWeight__SetNeighborsAndWeights", (DL_FUNC) &_rgeoda_p_GeoDaWeight__SetNeighborsAndWeights, 4},
    {"_rgeoda_p_GeoDaWeight__GetNbrStats", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetNbrStats, 1},
    {"_rgeoda_p_GeoDaWeight__GetNumObs", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetNumObs, 1},
    {"_rgeoda_p_GeoDaWeight__IsSymmetric", (DL_FUNC) &_rgeoda_p_GeoDaWeight__IsSymmetric, 1},
    {"_rgeoda_p_GeoDaWeight__HasIsolates", (DL_FUNC) &_rgeoda_p_GeoDaWeight__HasIsolates, 1},
    {"_rgeoda_p_GeoDaWeight__GetSparsity", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetSparsity, 1},
    {"_rgeoda_p_GeoDaWeight__GetMinNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetMinNeighbors, 1},
    {"_rgeoda_p_GeoDaWeight__GetMaxNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetMaxNeighbors, 1},
    {"_rgeoda_p_GeoDaWeight__GetMeanNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetMeanNeighbors, 1},
    {"_rgeoda_p_GeoDaWeight__GetMedianNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetMedianNeighbors, 1},
    {"_rgeoda_p_GeoDaWeight__SpatialLag", (DL_FUNC) &_rgeoda_p_GeoDaWeight__SpatialLag, 2},
    {"_rgeoda_p_GeoDaWeight__GetNeighborSize", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetNeighborSize, 2},
    {"_rgeoda_p_GeoDaWeight__SaveToFile", (DL_FUNC) &_rgeoda_p_GeoDaWeight__SaveToFile, 5},
    {"_rgeoda_p_GeoDaWeight__GetNeighbors", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetNeighbors, 2},
    {"_rgeoda_p_GeoDaWeight__GetNeighborWeights", (DL_FUNC) &_rgeoda_p_GeoDaWeight__GetNeighborWeights, 2},
    {"_rgeoda_p_gda_min_distthreshold", (DL_FUNC) &_rgeoda_p_gda_min_distthreshold, 3},
    {"_rgeoda_p_gda_queen_weights", (DL_FUNC) &_rgeoda_p_gda_queen_weights, 4},
    {"_rgeoda_p_gda_rook_weights", (DL_FUNC) &_rgeoda_p_gda_rook_weights, 4},
    {"_rgeoda_p_gda_distance_weights", (DL_FUNC) &_rgeoda_p_gda_distance_weights, 6},
    {"_rgeoda_p_gda_kernel_weights", (DL_FUNC) &_rgeoda_p_gda_kernel_weights, 8},
    {"_rgeoda_p_gda_knn_weights", (DL_FUNC) &_rgeoda_p_gda_knn_weights, 6},
    {"_rgeoda_p_gda_kernel_knn_weights", (DL_FUNC) &_rgeoda_p_gda_kernel_knn_weights, 10},
    {"_rgeoda_p_gda_load_gal", (DL_FUNC) &_rgeoda_p_gda_load_gal, 2},
    {"_rgeoda_p_gda_load_gwt", (DL_FUNC) &_rgeoda_p_gda_load_gwt, 2},
    {"_rgeoda_p_gda_load_swm", (DL_FUNC) &_rgeoda_p_gda_load_swm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rgeoda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
